(* Copyright (c) 2009 Tjark Weber. All rights reserved. *)

structure SolverSpec = struct

  (* possible values:
     0 - no output at all (except for fatal errors)
     1 - warnings only
     2 - also diagnostic messages of constant length
     3 - also diagnostic messages that are potentially lengthy (e.g., terms,
         models, proofs)
     4 - moreover, temporary files (for communication with the SMT solver) are
         not removed after solver invocation *)
  val trace = ref 2

  val _ = Feedback.register_trace ("HolSmtLib", trace, 4)

  datatype result = SAT of string option  (* model, should perhaps be a thm *)
                  | UNSAT of Thm.thm option  (* assumptions |- conclusion *)
                  | UNKNOWN of string option  (* reason for failure *)

  (* calls 'pre' (which is supposed to translate a HOL goal into a list of
     strings that the SMT solver will understand); writes these strings into a
     file; appends the names of input and output files to 'cmd_stem' before
     executing it as a system command; calls 'post' (which is supposed to parse
     the output file generated by the SMT solver); deletes input and output
     file (unless '!trace' = 4); emits messages according to '!trace' *)
  fun make_solver (pre : Abbrev.goal -> 'a * string list)
                  (cmd_stem : string)
                  (post : 'a -> string -> result) : Abbrev.goal -> result =
  fn goal =>
  let
    (* call 'pre goal' to generate SMT solver input *)
    val (x, inputs) = pre goal
    val infile = FileSys.tmpName ()
    val _ = Library.write_strings_to_file infile inputs
    val outfile = FileSys.tmpName ()
    val cmd = cmd_stem ^ " " ^ infile ^ " > " ^ outfile
    (* the actual system call to the SMT solver *)
    val _ = if !trace > 1 then
        Feedback.HOL_MESG ("HolSmtLib: calling external command '" ^ cmd ^ "'")
      else ()
    val _ = Systeml.system_ps cmd
    (* call 'post' to determine the result *)
    val result = post x outfile
    val _ = if !trace > 1 then
        Feedback.HOL_MESG ("HolSmtLib: solver returned '" ^
          (case result of
             SAT NONE => "satisfiable' (no model given)"
           | SAT (SOME _) => "satisfiable' (model given)"
           | UNSAT NONE => "unsatisfiable' (no proof given)"
           | UNSAT (SOME thm) =>
             if !trace > 2 then
               "unsatisfiable' (theorem: " ^ Hol_pp.thm_to_string thm ^ ")"
             else
               "unsatisfiable' (proof checked)"
           | UNKNOWN NONE => "unknown' (no reason given)"
           | UNKNOWN (SOME _) => "unknown' (reason given)"))
      else ()
    (* if the SMT solver returned a theorem 'thm', then this should be of the
       form "A' |- g" with A' \subseteq A, where (A, g) is the input goal *)
    val _ = if !trace > 0 then
        case result of
          UNSAT (SOME thm) =>
            let
              val (A, g) = goal
              val A_set = HOLset.addList (Term.empty_tmset, A)
            in
              if not (HOLset.isSubset (Thm.hypset thm, A_set)) then
                Feedback.HOL_WARNING "SolverSpec" "make_solver"
                  "theorem contains additional hyp(s)"
              else ();
              if not (Term.aconv (Thm.concl thm) g) then
                Feedback.HOL_WARNING "SolverSpec" "make_solver"
                  "conclusion of theorem does not match goal"
              else ()
            end
        | _ =>
          ()
      else ()
    (* delete all temporary files *)
    val _ = if !trace < 4 then
        List.app (fn path => OS.FileSys.remove path handle SysErr _ => ())
          [infile, outfile]
      else ()
  in
    result
  end

end
