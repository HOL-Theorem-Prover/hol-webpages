signature probabilityTheory =
sig
  type thm = Thm.thm

  (*  Definitions  *)
    val conditional_distribution_def : thm
    val conditional_expectation_def : thm
    val conditional_prob_def : thm
    val distribution_def : thm
    val events_def : thm
    val expectation_def : thm
    val indep_def : thm
    val indep_rv_def : thm
    val joint_distribution3_def : thm
    val joint_distribution_def : thm
    val p_space_def : thm
    val possibly_def : thm
    val prob_def : thm
    val prob_space_def : thm
    val probably_def : thm
    val random_variable_def : thm
    val real_random_variable_def : thm
    val rv_conditional_expectation_def : thm
    val uniform_distribution_def : thm

  (*  Theorems  *)
    val ABS_1_MINUS_PROB : thm
    val ABS_PROB : thm
    val ADDITIVE_PROB : thm
    val COUNTABLY_ADDITIVE_PROB : thm
    val EVENTS : thm
    val EVENTS_ALGEBRA : thm
    val EVENTS_COMPL : thm
    val EVENTS_COUNTABLE_INTER : thm
    val EVENTS_COUNTABLE_UNION : thm
    val EVENTS_DIFF : thm
    val EVENTS_EMPTY : thm
    val EVENTS_INTER : thm
    val EVENTS_SIGMA_ALGEBRA : thm
    val EVENTS_SPACE : thm
    val EVENTS_UNION : thm
    val INCREASING_PROB : thm
    val INDEP_EMPTY : thm
    val INDEP_REFL : thm
    val INDEP_SPACE : thm
    val INDEP_SYM : thm
    val INTER_PSPACE : thm
    val POSITIVE_PROB : thm
    val PROB : thm
    val PROB_ADDITIVE : thm
    val PROB_COMPL : thm
    val PROB_COMPL_LE1 : thm
    val PROB_COUNTABLY_ADDITIVE : thm
    val PROB_COUNTABLY_SUBADDITIVE : thm
    val PROB_COUNTABLY_ZERO : thm
    val PROB_DISCRETE_EVENTS : thm
    val PROB_DISCRETE_EVENTS_COUNTABLE : thm
    val PROB_EMPTY : thm
    val PROB_EQUIPROBABLE_FINITE_UNIONS : thm
    val PROB_EQ_BIGUNION_IMAGE : thm
    val PROB_EQ_COMPL : thm
    val PROB_FINITELY_ADDITIVE : thm
    val PROB_INCREASING : thm
    val PROB_INCREASING_UNION : thm
    val PROB_INDEP : thm
    val PROB_LE_1 : thm
    val PROB_ONE_INTER : thm
    val PROB_POSITIVE : thm
    val PROB_REAL_SUM_IMAGE : thm
    val PROB_REAL_SUM_IMAGE_FN : thm
    val PROB_REAL_SUM_IMAGE_SPACE : thm
    val PROB_SPACE : thm
    val PROB_SPACE_ADDITIVE : thm
    val PROB_SPACE_COUNTABLY_ADDITIVE : thm
    val PROB_SPACE_INCREASING : thm
    val PROB_SPACE_POSITIVE : thm
    val PROB_SUBADDITIVE : thm
    val PROB_UNIV : thm
    val PROB_ZERO_UNION : thm
    val PSPACE : thm
    val conditional_distribution_le_1 : thm
    val conditional_distribution_pos : thm
    val distribution_lebesgue_thm1 : thm
    val distribution_lebesgue_thm2 : thm
    val distribution_partition : thm
    val distribution_pos : thm
    val distribution_prob_space : thm
    val distribution_x_eq_1_imp_distribution_y_eq_0 : thm
    val finite_expectation : thm
    val finite_expectation1 : thm
    val finite_expectation2 : thm
    val finite_marginal_product_space_POW : thm
    val finite_marginal_product_space_POW2 : thm
    val finite_marginal_product_space_POW3 : thm
    val finite_support_expectation : thm
    val joint_conditional : thm
    val joint_distribution_le : thm
    val joint_distribution_le2 : thm
    val joint_distribution_le_1 : thm
    val joint_distribution_pos : thm
    val joint_distribution_sum_mul1 : thm
    val joint_distribution_sums_1 : thm
    val joint_distribution_sym : thm
    val marginal_distribution1 : thm
    val marginal_distribution2 : thm
    val marginal_joint_zero : thm
    val marginal_joint_zero3 : thm
    val prob_x_eq_1_imp_prob_y_eq_0 : thm
    val uniform_distribution_prob_space : thm

  val probability_grammars : type_grammar.grammar * term_grammar.grammar
(*
   [lebesgue] Parent theory of "probability"

   [conditional_distribution_def]  Definition

      |- ‚àÄp X Y a b.
           conditional_distribution p X Y a b =
           joint_distribution p X Y (a √ó b) / distribution p Y b

   [conditional_expectation_def]  Definition

      |- ‚àÄp X s.
           conditional_expectation p X s =
           @f.
             real_random_variable f p ‚àß
             ‚àÄg.
               g ‚àà s ‚áí
               (integral p (Œªx. f x * indicator_fn g x) =
                integral p (Œªx. X x * indicator_fn g x))

   [conditional_prob_def]  Definition

      |- ‚àÄp e1 e2.
           conditional_prob p e1 e2 =
           conditional_expectation p (indicator_fn e1) e2

   [distribution_def]  Definition

      |- ‚àÄp X. distribution p X = (Œªs. prob p (PREIMAGE X s ‚à© p_space p))

   [events_def]  Definition

      |- events = measurable_sets

   [expectation_def]  Definition

      |- expectation = integral

   [indep_def]  Definition

      |- ‚àÄp a b.
           indep p a b ‚áî
           a ‚àà events p ‚àß b ‚àà events p ‚àß
           (prob p (a ‚à© b) = prob p a * prob p b)

   [indep_rv_def]  Definition

      |- ‚àÄp X Y s t.
           indep_rv p X Y s t ‚áî
           ‚àÄA B.
             A ‚àà subsets s ‚àß B ‚àà subsets t ‚áí
             indep p (PREIMAGE X A) (PREIMAGE Y B)

   [joint_distribution3_def]  Definition

      |- ‚àÄp X Y Z.
           joint_distribution3 p X Y Z =
           (Œªa. prob p (PREIMAGE (Œªx. (X x,Y x,Z x)) a ‚à© p_space p))

   [joint_distribution_def]  Definition

      |- ‚àÄp X Y.
           joint_distribution p X Y =
           (Œªa. prob p (PREIMAGE (Œªx. (X x,Y x)) a ‚à© p_space p))

   [p_space_def]  Definition

      |- p_space = m_space

   [possibly_def]  Definition

      |- ‚àÄp e. possibly p e ‚áî e ‚àà events p ‚àß prob p e ‚â† 0

   [prob_def]  Definition

      |- prob = measure

   [prob_space_def]  Definition

      |- ‚àÄp. prob_space p ‚áî measure_space p ‚àß (measure p (p_space p) = 1)

   [probably_def]  Definition

      |- ‚àÄp e. probably p e ‚áî e ‚àà events p ‚àß (prob p e = 1)

   [random_variable_def]  Definition

      |- ‚àÄX p s.
           random_variable X p s ‚áî
           prob_space p ‚àß X ‚àà measurable (p_space p,events p) s

   [real_random_variable_def]  Definition

      |- ‚àÄX p.
           real_random_variable X p ‚áî
           prob_space p ‚àß
           (‚àÄx. x ‚àà p_space p ‚áí X x ‚â† NegInf ‚àß X x ‚â† PosInf) ‚àß
           X ‚àà measurable (p_space p,events p) Borel

   [rv_conditional_expectation_def]  Definition

      |- ‚àÄp s X Y.
           rv_conditional_expectation p s X Y =
           conditional_expectation p X
             (IMAGE (Œªa. PREIMAGE Y a ‚à© p_space p) (subsets s))

   [uniform_distribution_def]  Definition

      |- ‚àÄp X s.
           uniform_distribution p X s = (Œªa. &CARD a / &CARD (space s))

   [ABS_1_MINUS_PROB]  Theorem

      |- ‚àÄp s.
           prob_space p ‚àß s ‚àà events p ‚àß prob p s ‚â† 0 ‚áí
           abs (1 ‚àí prob p s) < 1

   [ABS_PROB]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí (abs (prob p s) = prob p s)

   [ADDITIVE_PROB]  Theorem

      |- ‚àÄp.
           additive p ‚áî
           ‚àÄs t.
             s ‚àà events p ‚àß t ‚àà events p ‚àß DISJOINT s t ‚áí
             (prob p (s ‚à™ t) = prob p s + prob p t)

   [COUNTABLY_ADDITIVE_PROB]  Theorem

      |- ‚àÄp.
           countably_additive p ‚áî
           ‚àÄf.
             f ‚àà (ùïå(:num) -> events p) ‚àß
             (‚àÄm n. m ‚â† n ‚áí DISJOINT (f m) (f n)) ‚àß
             BIGUNION (IMAGE f ùïå(:num)) ‚àà events p ‚áí
             prob p o f sums prob p (BIGUNION (IMAGE f ùïå(:num)))

   [EVENTS]  Theorem

      |- ‚àÄa b c. events (a,b,c) = b

   [EVENTS_ALGEBRA]  Theorem

      |- ‚àÄp. prob_space p ‚áí algebra (p_space p,events p)

   [EVENTS_COMPL]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí p_space p DIFF s ‚àà events p

   [EVENTS_COUNTABLE_INTER]  Theorem

      |- ‚àÄp c.
           prob_space p ‚àß c ‚äÜ events p ‚àß countable c ‚àß c ‚â† ‚àÖ ‚áí
           BIGINTER c ‚àà events p

   [EVENTS_COUNTABLE_UNION]  Theorem

      |- ‚àÄp c.
           prob_space p ‚àß c ‚äÜ events p ‚àß countable c ‚áí
           BIGUNION c ‚àà events p

   [EVENTS_DIFF]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚áí s DIFF t ‚àà events p

   [EVENTS_EMPTY]  Theorem

      |- ‚àÄp. prob_space p ‚áí ‚àÖ ‚àà events p

   [EVENTS_INTER]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚áí s ‚à© t ‚àà events p

   [EVENTS_SIGMA_ALGEBRA]  Theorem

      |- ‚àÄp. prob_space p ‚áí sigma_algebra (p_space p,events p)

   [EVENTS_SPACE]  Theorem

      |- ‚àÄp. prob_space p ‚áí p_space p ‚àà events p

   [EVENTS_UNION]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚áí s ‚à™ t ‚àà events p

   [INCREASING_PROB]  Theorem

      |- ‚àÄp.
           increasing p ‚áî
           ‚àÄs t. s ‚àà events p ‚àß t ‚àà events p ‚àß s ‚äÜ t ‚áí prob p s ‚â§ prob p t

   [INDEP_EMPTY]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí indep p ‚àÖ s

   [INDEP_REFL]  Theorem

      |- ‚àÄp a.
           prob_space p ‚àß a ‚àà events p ‚áí
           (indep p a a ‚áî (prob p a = 0) ‚à® (prob p a = 1))

   [INDEP_SPACE]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí indep p (p_space p) s

   [INDEP_SYM]  Theorem

      |- ‚àÄp a b. prob_space p ‚àß indep p a b ‚áí indep p b a

   [INTER_PSPACE]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí (p_space p ‚à© s = s)

   [POSITIVE_PROB]  Theorem

      |- ‚àÄp. positive p ‚áî (prob p ‚àÖ = 0) ‚àß ‚àÄs. s ‚àà events p ‚áí 0 ‚â§ prob p s

   [PROB]  Theorem

      |- ‚àÄa b c. prob (a,b,c) = c

   [PROB_ADDITIVE]  Theorem

      |- ‚àÄp s t u.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚àß DISJOINT s t ‚àß
           (u = s ‚à™ t) ‚áí
           (prob p u = prob p s + prob p t)

   [PROB_COMPL]  Theorem

      |- ‚àÄp s.
           prob_space p ‚àß s ‚àà events p ‚áí
           (prob p (p_space p DIFF s) = 1 ‚àí prob p s)

   [PROB_COMPL_LE1]  Theorem

      |- ‚àÄp s r.
           prob_space p ‚àß s ‚àà events p ‚áí
           (prob p (p_space p DIFF s) ‚â§ r ‚áî 1 ‚àí r ‚â§ prob p s)

   [PROB_COUNTABLY_ADDITIVE]  Theorem

      |- ‚àÄp s f.
           prob_space p ‚àß f ‚àà (ùïå(:num) -> events p) ‚àß
           (‚àÄm n. m ‚â† n ‚áí DISJOINT (f m) (f n)) ‚àß
           (s = BIGUNION (IMAGE f ùïå(:num))) ‚áí
           prob p o f sums prob p s

   [PROB_COUNTABLY_SUBADDITIVE]  Theorem

      |- ‚àÄp f.
           prob_space p ‚àß IMAGE f ùïå(:num) ‚äÜ events p ‚àß
           summable (prob p o f) ‚áí
           prob p (BIGUNION (IMAGE f ùïå(:num))) ‚â§ suminf (prob p o f)

   [PROB_COUNTABLY_ZERO]  Theorem

      |- ‚àÄp c.
           prob_space p ‚àß countable c ‚àß c ‚äÜ events p ‚àß
           (‚àÄx. x ‚àà c ‚áí (prob p x = 0)) ‚áí
           (prob p (BIGUNION c) = 0)

   [PROB_DISCRETE_EVENTS]  Theorem

      |- ‚àÄp.
           prob_space p ‚àß FINITE (p_space p) ‚àß
           (‚àÄx. x ‚àà p_space p ‚áí {x} ‚àà events p) ‚áí
           ‚àÄs. s ‚äÜ p_space p ‚áí s ‚àà events p

   [PROB_DISCRETE_EVENTS_COUNTABLE]  Theorem

      |- ‚àÄp.
           prob_space p ‚àß countable (p_space p) ‚àß
           (‚àÄx. x ‚àà p_space p ‚áí {x} ‚àà events p) ‚áí
           ‚àÄs. s ‚äÜ p_space p ‚áí s ‚àà events p

   [PROB_EMPTY]  Theorem

      |- ‚àÄp. prob_space p ‚áí (prob p ‚àÖ = 0)

   [PROB_EQUIPROBABLE_FINITE_UNIONS]  Theorem

      |- ‚àÄp s.
           prob_space p ‚àß s ‚àà events p ‚àß (‚àÄx. x ‚àà s ‚áí {x} ‚àà events p) ‚àß
           FINITE s ‚àß (‚àÄx y. x ‚àà s ‚àß y ‚àà s ‚áí (prob p {x} = prob p {y})) ‚áí
           (prob p s = &CARD s * prob p {CHOICE s})

   [PROB_EQ_BIGUNION_IMAGE]  Theorem

      |- ‚àÄp.
           prob_space p ‚àß f ‚àà (ùïå(:num) -> events p) ‚àß
           g ‚àà (ùïå(:num) -> events p) ‚àß
           (‚àÄm n. m ‚â† n ‚áí DISJOINT (f m) (f n)) ‚àß
           (‚àÄm n. m ‚â† n ‚áí DISJOINT (g m) (g n)) ‚àß
           (‚àÄn. prob p (f n) = prob p (g n)) ‚áí
           (prob p (BIGUNION (IMAGE f ùïå(:num))) =
            prob p (BIGUNION (IMAGE g ùïå(:num))))

   [PROB_EQ_COMPL]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚àß
           (prob p (p_space p DIFF s) = prob p (p_space p DIFF t)) ‚áí
           (prob p s = prob p t)

   [PROB_FINITELY_ADDITIVE]  Theorem

      |- ‚àÄp s f n.
           prob_space p ‚àß f ‚àà (count n -> events p) ‚àß
           (‚àÄa b. a < n ‚àß b < n ‚àß a ‚â† b ‚áí DISJOINT (f a) (f b)) ‚àß
           (s = BIGUNION (IMAGE f (count n))) ‚áí
           (sum (0,n) (prob p o f) = prob p s)

   [PROB_INCREASING]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚àß s ‚äÜ t ‚áí
           prob p s ‚â§ prob p t

   [PROB_INCREASING_UNION]  Theorem

      |- ‚àÄp s f.
           prob_space p ‚àß f ‚àà (ùïå(:num) -> events p) ‚àß
           (‚àÄn. f n ‚äÜ f (SUC n)) ‚àß (s = BIGUNION (IMAGE f ùïå(:num))) ‚áí
           prob p o f --> prob p s

   [PROB_INDEP]  Theorem

      |- ‚àÄp s t u.
           indep p s t ‚àß (u = s ‚à© t) ‚áí (prob p u = prob p s * prob p t)

   [PROB_LE_1]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí prob p s ‚â§ 1

   [PROB_ONE_INTER]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚àß (prob p t = 1) ‚áí
           (prob p (s ‚à© t) = prob p s)

   [PROB_POSITIVE]  Theorem

      |- ‚àÄp s. prob_space p ‚àß s ‚àà events p ‚áí 0 ‚â§ prob p s

   [PROB_REAL_SUM_IMAGE]  Theorem

      |- ‚àÄp s.
           prob_space p ‚àß s ‚àà events p ‚àß (‚àÄx. x ‚àà s ‚áí {x} ‚àà events p) ‚àß
           FINITE s ‚áí
           (prob p s = SIGMA (Œªx. prob p {x}) s)

   [PROB_REAL_SUM_IMAGE_FN]  Theorem

      |- ‚àÄp f e s.
           prob_space p ‚àß e ‚àà events p ‚àß (‚àÄx. x ‚àà s ‚áí e ‚à© f x ‚àà events p) ‚àß
           FINITE s ‚àß
           (‚àÄx y. x ‚àà s ‚àß y ‚àà s ‚àß x ‚â† y ‚áí DISJOINT (f x) (f y)) ‚àß
           (BIGUNION (IMAGE f s) ‚à© p_space p = p_space p) ‚áí
           (prob p e = SIGMA (Œªx. prob p (e ‚à© f x)) s)

   [PROB_REAL_SUM_IMAGE_SPACE]  Theorem

      |- ‚àÄp.
           prob_space p ‚àß (‚àÄx. x ‚àà p_space p ‚áí {x} ‚àà events p) ‚àß
           FINITE (p_space p) ‚áí
           (SIGMA (Œªx. prob p {x}) (p_space p) = 1)

   [PROB_SPACE]  Theorem

      |- ‚àÄp.
           prob_space p ‚áî
           sigma_algebra (p_space p,events p) ‚àß positive p ‚àß
           countably_additive p ‚àß (prob p (p_space p) = 1)

   [PROB_SPACE_ADDITIVE]  Theorem

      |- ‚àÄp. prob_space p ‚áí additive p

   [PROB_SPACE_COUNTABLY_ADDITIVE]  Theorem

      |- ‚àÄp. prob_space p ‚áí countably_additive p

   [PROB_SPACE_INCREASING]  Theorem

      |- ‚àÄp. prob_space p ‚áí increasing p

   [PROB_SPACE_POSITIVE]  Theorem

      |- ‚àÄp. prob_space p ‚áí positive p

   [PROB_SUBADDITIVE]  Theorem

      |- ‚àÄp s t u.
           prob_space p ‚àß t ‚àà events p ‚àß u ‚àà events p ‚àß (s = t ‚à™ u) ‚áí
           prob p s ‚â§ prob p t + prob p u

   [PROB_UNIV]  Theorem

      |- ‚àÄp. prob_space p ‚áí (prob p (p_space p) = 1)

   [PROB_ZERO_UNION]  Theorem

      |- ‚àÄp s t.
           prob_space p ‚àß s ‚àà events p ‚àß t ‚àà events p ‚àß (prob p t = 0) ‚áí
           (prob p (s ‚à™ t) = prob p s)

   [PSPACE]  Theorem

      |- ‚àÄa b c. p_space (a,b,c) = a

   [conditional_distribution_le_1]  Theorem

      |- ‚àÄp X Y a b.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           conditional_distribution p X Y a b ‚â§ 1

   [conditional_distribution_pos]  Theorem

      |- ‚àÄp X Y a b.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           0 ‚â§ conditional_distribution p X Y a b

   [distribution_lebesgue_thm1]  Theorem

      |- ‚àÄX p s A.
           random_variable X p s ‚àß A ‚àà subsets s ‚áí
           (Normal (distribution p X A) =
            integral p (indicator_fn (PREIMAGE X A ‚à© p_space p)))

   [distribution_lebesgue_thm2]  Theorem

      |- ‚àÄX p s A.
           random_variable X p s ‚àß A ‚àà subsets s ‚áí
           (Normal (distribution p X A) =
            integral (space s,subsets s,distribution p X) (indicator_fn A))

   [distribution_partition]  Theorem

      |- ‚àÄp X.
           prob_space p ‚àß (‚àÄx. x ‚àà p_space p ‚áí {x} ‚àà events p) ‚àß
           FINITE (p_space p) ‚àß random_variable X p Borel ‚áí
           (SIGMA (Œªx. distribution p X {x}) (IMAGE X (p_space p)) = 1)

   [distribution_pos]  Theorem

      |- ‚àÄp X a.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           0 ‚â§ distribution p X a

   [distribution_prob_space]  Theorem

      |- ‚àÄp X s.
           random_variable X p s ‚áí
           prob_space (space s,subsets s,distribution p X)

   [distribution_x_eq_1_imp_distribution_y_eq_0]  Theorem

      |- ‚àÄX p x.
           random_variable X p
             (IMAGE X (p_space p),POW (IMAGE X (p_space p))) ‚àß
           (distribution p X {x} = 1) ‚áí
           ‚àÄy. y ‚â† x ‚áí (distribution p X {y} = 0)

   [finite_expectation]  Theorem

      |- ‚àÄp X.
           FINITE (p_space p) ‚àß real_random_variable X p ‚áí
           (expectation p X =
            SIGMA (Œªr. r * Normal (distribution p X {r}))
              (IMAGE X (p_space p)))

   [finite_expectation1]  Theorem

      |- ‚àÄp X.
           FINITE (p_space p) ‚àß real_random_variable X p ‚áí
           (expectation p X =
            SIGMA (Œªr. r * Normal (prob p (PREIMAGE X {r} ‚à© p_space p)))
              (IMAGE X (p_space p)))

   [finite_expectation2]  Theorem

      |- ‚àÄp X.
           FINITE (IMAGE X (p_space p)) ‚àß real_random_variable X p ‚áí
           (expectation p X =
            SIGMA (Œªr. r * Normal (prob p (PREIMAGE X {r} ‚à© p_space p)))
              (IMAGE X (p_space p)))

   [finite_marginal_product_space_POW]  Theorem

      |- ‚àÄp X Y.
           (POW (p_space p) = events p) ‚àß
           random_variable X p
             (IMAGE X (p_space p),POW (IMAGE X (p_space p))) ‚àß
           random_variable Y p
             (IMAGE Y (p_space p),POW (IMAGE Y (p_space p))) ‚àß
           FINITE (p_space p) ‚áí
           measure_space
             (IMAGE X (p_space p) √ó IMAGE Y (p_space p),
              POW (IMAGE X (p_space p) √ó IMAGE Y (p_space p)),
              (Œªa. prob p (PREIMAGE (Œªx. (X x,Y x)) a ‚à© p_space p)))

   [finite_marginal_product_space_POW2]  Theorem

      |- ‚àÄp s1 s2 X Y.
           (POW (p_space p) = events p) ‚àß random_variable X p (s1,POW s1) ‚àß
           random_variable Y p (s2,POW s2) ‚àß FINITE (p_space p) ‚àß
           FINITE s1 ‚àß FINITE s2 ‚áí
           measure_space (s1 √ó s2,POW (s1 √ó s2),joint_distribution p X Y)

   [finite_marginal_product_space_POW3]  Theorem

      |- ‚àÄp s1 s2 s3 X Y Z.
           (POW (p_space p) = events p) ‚àß random_variable X p (s1,POW s1) ‚àß
           random_variable Y p (s2,POW s2) ‚àß
           random_variable Z p (s3,POW s3) ‚àß FINITE (p_space p) ‚àß
           FINITE s1 ‚àß FINITE s2 ‚àß FINITE s3 ‚áí
           measure_space
             (s1 √ó (s2 √ó s3),POW (s1 √ó (s2 √ó s3)),
              joint_distribution3 p X Y Z)

   [finite_support_expectation]  Theorem

      |- ‚àÄp X.
           FINITE (IMAGE X (p_space p)) ‚àß real_random_variable X p ‚áí
           (expectation p X =
            SIGMA (Œªr. r * Normal (distribution p X {r}))
              (IMAGE X (p_space p)))

   [joint_conditional]  Theorem

      |- ‚àÄp X Y a b.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           (joint_distribution p X Y (a √ó b) =
            conditional_distribution p Y X b a * distribution p X a)

   [joint_distribution_le]  Theorem

      |- ‚àÄp X Y a b.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           joint_distribution p X Y (a √ó b) ‚â§ distribution p X a

   [joint_distribution_le2]  Theorem

      |- ‚àÄp X Y a b.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           joint_distribution p X Y (a √ó b) ‚â§ distribution p Y b

   [joint_distribution_le_1]  Theorem

      |- ‚àÄp X Y a.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           joint_distribution p X Y a ‚â§ 1

   [joint_distribution_pos]  Theorem

      |- ‚àÄp X Y a.
           prob_space p ‚àß (events p = POW (p_space p)) ‚áí
           0 ‚â§ joint_distribution p X Y a

   [joint_distribution_sum_mul1]  Theorem

      |- ‚àÄp X Y f.
           prob_space p ‚àß FINITE (p_space p) ‚àß
           (events p = POW (p_space p)) ‚áí
           (SIGMA (Œª(x,y). joint_distribution p X Y {(x,y)} * f x)
              (IMAGE X (p_space p) √ó IMAGE Y (p_space p)) =
            SIGMA (Œªx. distribution p X {x} * f x) (IMAGE X (p_space p)))

   [joint_distribution_sums_1]  Theorem

      |- ‚àÄp X Y.
           prob_space p ‚àß FINITE (p_space p) ‚àß
           (events p = POW (p_space p)) ‚áí
           (SIGMA (Œª(x,y). joint_distribution p X Y {(x,y)})
              (IMAGE X (p_space p) √ó IMAGE Y (p_space p)) =
            1)

   [joint_distribution_sym]  Theorem

      |- ‚àÄp X Y a b.
           prob_space p ‚áí
           (joint_distribution p X Y (a √ó b) =
            joint_distribution p Y X (b √ó a))

   [marginal_distribution1]  Theorem

      |- ‚àÄp X Y a.
           prob_space p ‚àß FINITE (p_space p) ‚àß
           (events p = POW (p_space p)) ‚áí
           (distribution p X a =
            SIGMA (Œªx. joint_distribution p X Y (a √ó {x}))
              (IMAGE Y (p_space p)))

   [marginal_distribution2]  Theorem

      |- ‚àÄp X Y b.
           prob_space p ‚àß FINITE (p_space p) ‚àß
           (events p = POW (p_space p)) ‚áí
           (distribution p Y b =
            SIGMA (Œªx. joint_distribution p X Y ({x} √ó b))
              (IMAGE X (p_space p)))

   [marginal_joint_zero]  Theorem

      |- ‚àÄp X Y s t.
           prob_space p ‚àß (events p = POW (p_space p)) ‚àß
           ((distribution p X s = 0) ‚à® (distribution p Y t = 0)) ‚áí
           (joint_distribution p X Y (s √ó t) = 0)

   [marginal_joint_zero3]  Theorem

      |- ‚àÄp X Y Z s t u.
           prob_space p ‚àß (events p = POW (p_space p)) ‚àß
           ((distribution p X s = 0) ‚à® (distribution p Y t = 0) ‚à®
            (distribution p Z u = 0)) ‚áí
           (joint_distribution3 p X Y Z (s √ó (t √ó u)) = 0)

   [prob_x_eq_1_imp_prob_y_eq_0]  Theorem

      |- ‚àÄp x.
           prob_space p ‚àß {x} ‚àà events p ‚àß (prob p {x} = 1) ‚áí
           ‚àÄy. {y} ‚àà events p ‚àß y ‚â† x ‚áí (prob p {y} = 0)

   [uniform_distribution_prob_space]  Theorem

      |- ‚àÄX p s.
           FINITE (p_space p) ‚àß FINITE (space s) ‚àß random_variable X p s ‚áí
           prob_space (space s,subsets s,uniform_distribution p X s)


*)
end
