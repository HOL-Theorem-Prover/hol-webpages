(* Copyright (c) 2010 Tjark Weber. All rights reserved. *)

(* Entry point into HolQbfLib. *)

structure HolQbfLib :> HolQbfLib = struct

  fun get_certificate t =
  let
    val path = FileSys.tmpName ()
    val dict = QDimacs.write_qdimacs_file path t
    (* the actual system call to Squolem *)
    val cmd = "squolem2 -c " ^ path ^ " >& /dev/null"
    val _ = if !QbfTrace.trace > 1 then
        Feedback.HOL_MESG ("HolQbfLib: calling external command '" ^ cmd ^ "'")
      else ()
    val _ = Systeml.system_ps cmd
    val cert_path = path ^ ".qbc"  (* the file name is hard-wired in Squolem *)
    val cert = QbfCertificate.read_certificate_file cert_path
    (* delete temporary files *)
    val _ = if !QbfTrace.trace < 4 then
        List.app (fn path => OS.FileSys.remove path handle SysErr _ => ())
          [path, cert_path]
      else ()
  in
    (dict, cert)
  end

  (* 'prove' can prove valid QBFs in prenex form by validating a
     certificate of validity generated by the QBF solver Squolem.
     Returns a theorem "|- t". Fails if Squolem does not generate a
     certificate of validity. *)
  fun prove t =
  let
    val (dict, cert) = get_certificate t
  in
    case cert of
      QbfCertificate.VALID _ => QbfCertificate.check t dict cert
    | _ =>
      raise Feedback.mk_HOL_ERR "HolQbfLib" "prove" "certificate says invalid"
  end

  (* 'disprove' can disprove invalid QBFs in prenex form by validating
     a certificate of invalidity generated by the QBF solver Squolem.
     Returns a theorem "t |- F". Fails if Squolem does not generate a
     certificate of invalidity. *)
  fun disprove t =
  let
    val (dict, cert) = get_certificate t
  in
    case cert of
      QbfCertificate.INVALID _ =>
      QbfCertificate.check t dict cert
    | _ =>
      raise Feedback.mk_HOL_ERR "HolQbfLib" "disprove" "certificate says valid"
  end

  (* 'decide' can prove valid and disprove invalid QBFs in prenex form
     by validating a certificate (of validity or invalidity,
     respectively) generated by the QBF solver Squolem. Returns a
     theorem "|- t" or "t |- F". Fails if Squolem does not generate a
     certificate. *)
  fun decide t =
  let
    val (dict, cert) = get_certificate t
  in
    QbfCertificate.check t dict cert
  end

end
