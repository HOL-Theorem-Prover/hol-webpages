signature prob_extraTheory =
sig
  type thm = Thm.thm
  
  (*  Definitions  *)
    val inf_def : thm
  
  (*  Theorems  *)
    val ABS_BETWEEN_LE : thm
    val ABS_UNIT_INTERVAL : thm
    val APPEND_MEM : thm
    val BOOL_BOOL_CASES : thm
    val BOOL_BOOL_CASES_THM : thm
    val COMPL_CLAUSES : thm
    val COMPL_COMPL : thm
    val COMPL_SPLITS : thm
    val DIVISION_TWO : thm
    val DIV_THEN_MULT : thm
    val DIV_TWO : thm
    val DIV_TWO_BASIC : thm
    val DIV_TWO_CANCEL : thm
    val DIV_TWO_EXP : thm
    val DIV_TWO_MONO : thm
    val DIV_TWO_MONO_EVEN : thm
    val DIV_TWO_UNIQUE : thm
    val EQ_EXT_EQ : thm
    val EVEN_EXP_TWO : thm
    val EVEN_ODD_BASIC : thm
    val EVEN_ODD_EXISTS_EQ : thm
    val EXISTS_LONGEST : thm
    val EXP_DIV_TWO : thm
    val FILTER_FALSE : thm
    val FILTER_MEM : thm
    val FILTER_OUT_ELT : thm
    val FILTER_TRUE : thm
    val FOLDR_MAP : thm
    val GSPEC_DEF_ALT : thm
    val HALF_CANCEL : thm
    val HALF_LT_1 : thm
    val HALF_POS : thm
    val INF_DEF_ALT : thm
    val INTER_IS_EMPTY : thm
    val INTER_UNION_COMPL : thm
    val INTER_UNION_RDISTRIB : thm
    val INV_SUC : thm
    val INV_SUC_MAX : thm
    val INV_SUC_POS : thm
    val IN_COMPL : thm
    val IN_EMPTY : thm
    val IS_PREFIX_ANTISYM : thm
    val IS_PREFIX_BUTLAST : thm
    val IS_PREFIX_LENGTH : thm
    val IS_PREFIX_LENGTH_ANTI : thm
    val IS_PREFIX_NIL : thm
    val IS_PREFIX_REFL : thm
    val IS_PREFIX_SNOC : thm
    val IS_PREFIX_TRANS : thm
    val LAST_MAP_CONS : thm
    val LAST_MEM : thm
    val LENGTH_FILTER : thm
    val MAP_ID : thm
    val MAP_MEM : thm
    val MEM_FILTER : thm
    val MEM_NIL : thm
    val MEM_NIL_MAP_CONS : thm
    val MOD_TWO : thm
    val ONE_MINUS_HALF : thm
    val POW_HALF_EXP : thm
    val POW_HALF_MONO : thm
    val POW_HALF_POS : thm
    val POW_HALF_TWICE : thm
    val RAND_THM : thm
    val REAL_INF_MIN : thm
    val REAL_INVINV_ALL : thm
    val REAL_LE_EQ : thm
    val REAL_LE_INV_LE : thm
    val REAL_POW : thm
    val REAL_SUP_EXISTS_UNIQUE : thm
    val REAL_SUP_LE_X : thm
    val REAL_SUP_MAX : thm
    val REAL_X_LE_SUP : thm
    val SET_EQ_EXT : thm
    val SUBSET_EQ : thm
    val SUBSET_EQ_DECOMP : thm
    val UNION_DEF_ALT : thm
    val UNION_DISJOINT_SPLIT : thm
    val X_HALF_HALF : thm
  
  val prob_extra_grammars : type_grammar.grammar * term_grammar.grammar
(*
   [poly] Parent theory of "prob_extra"
   
   [transc] Parent theory of "prob_extra"
   
   [inf_def]  Definition
      
      |- ‚àÄP. inf P = -sup (IMAGE numeric_negate P)
   
   [ABS_BETWEEN_LE]  Theorem
      
      |- ‚àÄx y d. 0 ‚â§ d ‚àß x ‚àí d ‚â§ y ‚àß y ‚â§ x + d ‚áî abs (y ‚àí x) ‚â§ d
   
   [ABS_UNIT_INTERVAL]  Theorem
      
      |- ‚àÄx y. 0 ‚â§ x ‚àß x ‚â§ 1 ‚àß 0 ‚â§ y ‚àß y ‚â§ 1 ‚áí abs (x ‚àí y) ‚â§ 1
   
   [APPEND_MEM]  Theorem
      
      |- ‚àÄx l1 l2. MEM x (l1 ++ l2) ‚áî MEM x l1 ‚à® MEM x l2
   
   [BOOL_BOOL_CASES]  Theorem
      
      |- ‚àÄP. P (Œªb. F) ‚àß P (Œªb. T) ‚àß P (Œªb. b) ‚àß P (Œªb. ¬¨b) ‚áí ‚àÄf. P f
   
   [BOOL_BOOL_CASES_THM]  Theorem
      
      |- ‚àÄf. (f = (Œªb. F)) ‚à® (f = (Œªb. T)) ‚à® (f = (Œªb. b)) ‚à® (f = (Œªb. ¬¨b))
   
   [COMPL_CLAUSES]  Theorem
      
      |- ‚àÄs. (COMPL s ‚à© s = ‚àÖ) ‚àß (COMPL s ‚à™ s = ùïå(:Œ±))
   
   [COMPL_COMPL]  Theorem
      
      |- ‚àÄs. COMPL (COMPL s) = s
   
   [COMPL_SPLITS]  Theorem
      
      |- ‚àÄp q. p ‚à© q ‚à™ COMPL p ‚à© q = q
   
   [DIVISION_TWO]  Theorem
      
      |- ‚àÄn.
           (n = 2 * (n DIV 2) + n MOD 2) ‚àß ((n MOD 2 = 0) ‚à® (n MOD 2 = 1))
   
   [DIV_THEN_MULT]  Theorem
      
      |- ‚àÄp q. SUC q * (p DIV SUC q) ‚â§ p
   
   [DIV_TWO]  Theorem
      
      |- ‚àÄn. n = 2 * (n DIV 2) + n MOD 2
   
   [DIV_TWO_BASIC]  Theorem
      
      |- (0 DIV 2 = 0) ‚àß (1 DIV 2 = 0) ‚àß (2 DIV 2 = 1)
   
   [DIV_TWO_CANCEL]  Theorem
      
      |- ‚àÄn. (2 * n DIV 2 = n) ‚àß (SUC (2 * n) DIV 2 = n)
   
   [DIV_TWO_EXP]  Theorem
      
      |- ‚àÄn k. k DIV 2 < 2 ** n ‚áî k < 2 ** SUC n
   
   [DIV_TWO_MONO]  Theorem
      
      |- ‚àÄm n. m DIV 2 < n DIV 2 ‚áí m < n
   
   [DIV_TWO_MONO_EVEN]  Theorem
      
      |- ‚àÄm n. EVEN n ‚áí (m DIV 2 < n DIV 2 ‚áî m < n)
   
   [DIV_TWO_UNIQUE]  Theorem
      
      |- ‚àÄn q r.
           (n = 2 * q + r) ‚àß ((r = 0) ‚à® (r = 1)) ‚áí
           (q = n DIV 2) ‚àß (r = n MOD 2)
   
   [EQ_EXT_EQ]  Theorem
      
      |- ‚àÄf g. (‚àÄx. f x = g x) ‚áî (f = g)
   
   [EVEN_EXP_TWO]  Theorem
      
      |- ‚àÄn. EVEN (2 ** n) ‚áî n ‚â† 0
   
   [EVEN_ODD_BASIC]  Theorem
      
      |- EVEN 0 ‚àß ¬¨EVEN 1 ‚àß EVEN 2 ‚àß ¬¨ODD 0 ‚àß ODD 1 ‚àß ¬¨ODD 2
   
   [EVEN_ODD_EXISTS_EQ]  Theorem
      
      |- ‚àÄn. (EVEN n ‚áî ‚àÉm. n = 2 * m) ‚àß (ODD n ‚áî ‚àÉm. n = SUC (2 * m))
   
   [EXISTS_LONGEST]  Theorem
      
      |- ‚àÄx y. ‚àÉz. MEM z (x::y) ‚àß ‚àÄw. MEM w (x::y) ‚áí LENGTH w ‚â§ LENGTH z
   
   [EXP_DIV_TWO]  Theorem
      
      |- ‚àÄn. 2 ** SUC n DIV 2 = 2 ** n
   
   [FILTER_FALSE]  Theorem
      
      |- ‚àÄl. FILTER (Œªx. F) l = []
   
   [FILTER_MEM]  Theorem
      
      |- ‚àÄP x l. MEM x (FILTER P l) ‚áí P x
   
   [FILTER_OUT_ELT]  Theorem
      
      |- ‚àÄx l. MEM x l ‚à® (FILTER (Œªy. y ‚â† x) l = l)
   
   [FILTER_TRUE]  Theorem
      
      |- ‚àÄl. FILTER (Œªx. T) l = l
   
   [FOLDR_MAP]  Theorem
      
      |- ‚àÄf e g l. FOLDR f e (MAP g l) = FOLDR (Œªx y. f (g x) y) e l
   
   [GSPEC_DEF_ALT]  Theorem
      
      |- ‚àÄf. GSPEC f = (Œªv. ‚àÉx. (v,T) = f x)
   
   [HALF_CANCEL]  Theorem
      
      |- 2 * (1 / 2) = 1
   
   [HALF_LT_1]  Theorem
      
      |- 1 / 2 < 1
   
   [HALF_POS]  Theorem
      
      |- 0 < 1 / 2
   
   [INF_DEF_ALT]  Theorem
      
      |- ‚àÄP. inf P = -sup (Œªr. P (-r))
   
   [INTER_IS_EMPTY]  Theorem
      
      |- ‚àÄs t. (s ‚à© t = ‚àÖ) ‚áî ‚àÄx. ¬¨s x ‚à® ¬¨t x
   
   [INTER_UNION_COMPL]  Theorem
      
      |- ‚àÄs t. s ‚à© t = COMPL (COMPL s ‚à™ COMPL t)
   
   [INTER_UNION_RDISTRIB]  Theorem
      
      |- ‚àÄp q r. (p ‚à™ q) ‚à© r = p ‚à© r ‚à™ q ‚à© r
   
   [INV_SUC]  Theorem
      
      |- ‚àÄn. 0 < 1 / &SUC n ‚àß 1 / &SUC n ‚â§ 1
   
   [INV_SUC_MAX]  Theorem
      
      |- ‚àÄn. 1 / &SUC n ‚â§ 1
   
   [INV_SUC_POS]  Theorem
      
      |- ‚àÄn. 0 < 1 / &SUC n
   
   [IN_COMPL]  Theorem
      
      |- ‚àÄx s. x ‚àà COMPL s ‚áî x ‚àâ s
   
   [IN_EMPTY]  Theorem
      
      |- ‚àÄx. x ‚àâ ‚àÖ
   
   [IS_PREFIX_ANTISYM]  Theorem
      
      |- ‚àÄx y. x ‚âº y ‚àß y ‚âº x ‚áí (x = y)
   
   [IS_PREFIX_BUTLAST]  Theorem
      
      |- ‚àÄx y. FRONT (x::y) ‚âº x::y
   
   [IS_PREFIX_LENGTH]  Theorem
      
      |- ‚àÄx y. x ‚âº y ‚áí LENGTH x ‚â§ LENGTH y
   
   [IS_PREFIX_LENGTH_ANTI]  Theorem
      
      |- ‚àÄx y. x ‚âº y ‚àß (LENGTH x = LENGTH y) ‚áí (x = y)
   
   [IS_PREFIX_NIL]  Theorem
      
      |- ‚àÄx. [] ‚âº x ‚àß (x ‚âº [] ‚áî (x = []))
   
   [IS_PREFIX_REFL]  Theorem
      
      |- ‚àÄx. x ‚âº x
   
   [IS_PREFIX_SNOC]  Theorem
      
      |- ‚àÄx y z. z ‚âº SNOC x y ‚áî z ‚âº y ‚à® (z = SNOC x y)
   
   [IS_PREFIX_TRANS]  Theorem
      
      |- ‚àÄx y z. y ‚âº x ‚àß z ‚âº y ‚áí z ‚âº x
   
   [LAST_MAP_CONS]  Theorem
      
      |- ‚àÄb h t. ‚àÉx. LAST (MAP (CONS b) (h::t)) = b::x
   
   [LAST_MEM]  Theorem
      
      |- ‚àÄh t. MEM (LAST (h::t)) (h::t)
   
   [LENGTH_FILTER]  Theorem
      
      |- ‚àÄP l. LENGTH (FILTER P l) ‚â§ LENGTH l
   
   [MAP_ID]  Theorem
      
      |- ‚àÄl. MAP (Œªx. x) l = l
   
   [MAP_MEM]  Theorem
      
      |- ‚àÄf l x. MEM x (MAP f l) ‚áî ‚àÉy. MEM y l ‚àß (x = f y)
   
   [MEM_FILTER]  Theorem
      
      |- ‚àÄP l x. MEM x (FILTER P l) ‚áí MEM x l
   
   [MEM_NIL]  Theorem
      
      |- ‚àÄl. (‚àÄx. ¬¨MEM x l) ‚áî (l = [])
   
   [MEM_NIL_MAP_CONS]  Theorem
      
      |- ‚àÄx l. ¬¨MEM [] (MAP (CONS x) l)
   
   [MOD_TWO]  Theorem
      
      |- ‚àÄn. n MOD 2 = if EVEN n then 0 else 1
   
   [ONE_MINUS_HALF]  Theorem
      
      |- 1 ‚àí 1 / 2 = 1 / 2
   
   [POW_HALF_EXP]  Theorem
      
      |- ‚àÄn. (1 / 2) pow n = inv (&(2 ** n))
   
   [POW_HALF_MONO]  Theorem
      
      |- ‚àÄm n. m ‚â§ n ‚áí (1 / 2) pow n ‚â§ (1 / 2) pow m
   
   [POW_HALF_POS]  Theorem
      
      |- ‚àÄn. 0 < (1 / 2) pow n
   
   [POW_HALF_TWICE]  Theorem
      
      |- ‚àÄn. (1 / 2) pow n = 2 * (1 / 2) pow SUC n
   
   [RAND_THM]  Theorem
      
      |- ‚àÄf x y. (x = y) ‚áí (f x = f y)
   
   [REAL_INF_MIN]  Theorem
      
      |- ‚àÄP z. P z ‚àß (‚àÄx. P x ‚áí z ‚â§ x) ‚áí (inf P = z)
   
   [REAL_INVINV_ALL]  Theorem
      
      |- ‚àÄx. inv (inv x) = x
   
   [REAL_LE_EQ]  Theorem
      
      |- ‚àÄx y. x ‚â§ y ‚àß y ‚â§ x ‚áí (x = y)
   
   [REAL_LE_INV_LE]  Theorem
      
      |- ‚àÄx y. 0 < x ‚àß x ‚â§ y ‚áí inv y ‚â§ inv x
   
   [REAL_POW]  Theorem
      
      |- ‚àÄm n. &m pow n = &(m ** n)
   
   [REAL_SUP_EXISTS_UNIQUE]  Theorem
      
      |- ‚àÄP.
           (‚àÉx. P x) ‚àß (‚àÉz. ‚àÄx. P x ‚áí x ‚â§ z) ‚áí
           ‚àÉ!s. ‚àÄy. (‚àÉx. P x ‚àß y < x) ‚áî y < s
   
   [REAL_SUP_LE_X]  Theorem
      
      |- ‚àÄP x. (‚àÉr. P r) ‚àß (‚àÄr. P r ‚áí r ‚â§ x) ‚áí sup P ‚â§ x
   
   [REAL_SUP_MAX]  Theorem
      
      |- ‚àÄP z. P z ‚àß (‚àÄx. P x ‚áí x ‚â§ z) ‚áí (sup P = z)
   
   [REAL_X_LE_SUP]  Theorem
      
      |- ‚àÄP x.
           (‚àÉr. P r) ‚àß (‚àÉz. ‚àÄr. P r ‚áí r ‚â§ z) ‚àß (‚àÉr. P r ‚àß x ‚â§ r) ‚áí
           x ‚â§ sup P
   
   [SET_EQ_EXT]  Theorem
      
      |- ‚àÄs t. (s = t) ‚áî ‚àÄv. v ‚àà s ‚áî v ‚àà t
   
   [SUBSET_EQ]  Theorem
      
      |- ‚àÄs t. (s = t) ‚áî s ‚äÜ t ‚àß t ‚äÜ s
   
   [SUBSET_EQ_DECOMP]  Theorem
      
      |- ‚àÄs t. s ‚äÜ t ‚àß t ‚äÜ s ‚áí (s = t)
   
   [UNION_DEF_ALT]  Theorem
      
      |- ‚àÄs t. s ‚à™ t = (Œªx. s x ‚à® t x)
   
   [UNION_DISJOINT_SPLIT]  Theorem
      
      |- ‚àÄs t u. (s ‚à™ t = s ‚à™ u) ‚àß (s ‚à© t = ‚àÖ) ‚àß (s ‚à© u = ‚àÖ) ‚áí (t = u)
   
   [X_HALF_HALF]  Theorem
      
      |- ‚àÄx. 1 / 2 * x + 1 / 2 * x = x
   
   
*)
end
