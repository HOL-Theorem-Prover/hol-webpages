signature fcpTheory =
sig
  type thm = Thm.thm

  (*  Definitions  *)
    val EQUAL_def : thm
    val FCP : thm
    val FCP_CONS_def : thm
    val FCP_EVERY_def : thm
    val FCP_EXISTS_def : thm
    val FCP_HD_def : thm
    val FCP_MAP_def : thm
    val FCP_TL_def : thm
    val FCP_UPDATE_def : thm
    val HAS_SIZE_def : thm
    val IS_BIT0A_def : thm
    val IS_BIT0B_def : thm
    val IS_BIT1A_def : thm
    val IS_BIT1B_def : thm
    val IS_BIT1C_def : thm
    val L2V_def : thm
    val V2L_def : thm
    val abs_sub1_def : thm
    val bit0_TY_DEF : thm
    val bit0_case_def : thm
    val bit0_size_def : thm
    val bit1_TY_DEF : thm
    val bit1_case_def : thm
    val bit1_size_def : thm
    val cart_TY_DEF : thm
    val cart_tybij : thm
    val dimindex_def : thm
    val fcp_case_def : thm
    val fcp_index : thm
    val finite_image_TY_DEF : thm
    val finite_image_tybij : thm
    val finite_index_def : thm
    val rep_sub1_def : thm
    val sub1_TY_DEF : thm
    val sub1_bijections : thm
    val sub_equiv_def : thm

  (*  Theorems  *)
    val APPLY_FCP_UPDATE_ID : thm
    val CART_EQ : thm
    val DIMINDEX_GE_1 : thm
    val EL_V2L : thm
    val FCP_APPLY_UPDATE_THM : thm
    val FCP_BETA : thm
    val FCP_CONS : thm
    val FCP_ETA : thm
    val FCP_EVERY : thm
    val FCP_EXISTS : thm
    val FCP_HD : thm
    val FCP_MAP : thm
    val FCP_TL : thm
    val FCP_UPDATE_COMMUTES : thm
    val FCP_UPDATE_EQ : thm
    val FCP_UPDATE_IMP_ID : thm
    val INDEX_SUB1 : thm
    val LENGTH_V2L : thm
    val NOT_FINITE_IMP_dimindex_1 : thm
    val NULL_V2L : thm
    val READ_L2V : thm
    val READ_TL : thm
    val V2L_L2V : thm
    val V2L_RECURSIVE : thm
    val bit0_11 : thm
    val bit0_Axiom : thm
    val bit0_case_cong : thm
    val bit0_distinct : thm
    val bit0_induction : thm
    val bit0_nchotomy : thm
    val bit1_11 : thm
    val bit1_Axiom : thm
    val bit1_case_cong : thm
    val bit1_distinct : thm
    val bit1_induction : thm
    val bit1_nchotomy : thm
    val card_dimindex : thm
    val datatype_bit0 : thm
    val datatype_bit1 : thm
    val dimindex : thm
    val exists_v2l_thm : thm
    val fcp_Axiom : thm
    val fcp_ind : thm
    val fcp_subst_comp : thm
    val finite_bit0 : thm
    val finite_bit1 : thm
    val finite_one : thm
    val finite_sub1 : thm
    val finite_sum : thm
    val index_bit0 : thm
    val index_bit1 : thm
    val index_comp : thm
    val index_one : thm
    val index_sum : thm
    val sub1_ABS_REP_CLASS : thm
    val sub1_QUOTIENT : thm

  val fcp_grammars : type_grammar.grammar * term_grammar.grammar
(*
   [quotient_list] Parent theory of "fcp"

   [quotient_option] Parent theory of "fcp"

   [quotient_pair] Parent theory of "fcp"

   [quotient_sum] Parent theory of "fcp"

   [EQUAL_def]  Definition

      |- EQUAL = {CHOICE ùïå(:Œ±); CHOICE (REST ùïå(:Œ±))}

   [FCP]  Definition

      |- $FCP = (Œªg. @f. ‚àÄi. i < dimindex (:Œ≤) ‚áí (f ' i = g i))

   [FCP_CONS_def]  Definition

      |- ‚àÄh v. FCP_CONS h v = (0 :+ h) (FCP i. v ' (PRE i))

   [FCP_EVERY_def]  Definition

      |- ‚àÄP v. FCP_EVERY P v ‚áî ‚àÄi. dimindex (:Œ±) ‚â§ i ‚à® P (v ' i)

   [FCP_EXISTS_def]  Definition

      |- ‚àÄP v. FCP_EXISTS P v ‚áî ‚àÉi. i < dimindex (:Œ±) ‚àß P (v ' i)

   [FCP_HD_def]  Definition

      |- ‚àÄv. FCP_HD v = v ' 0

   [FCP_MAP_def]  Definition

      |- ‚àÄf v. FCP_MAP f v = FCP i. f (v ' i)

   [FCP_TL_def]  Definition

      |- ‚àÄv. FCP_TL v = FCP i. v ' (SUC i)

   [FCP_UPDATE_def]  Definition

      |- ‚àÄa b. a :+ b = (Œªm. FCP c. if a = c then b else m ' c)

   [HAS_SIZE_def]  Definition

      |- ‚àÄs n. s HAS_SIZE n ‚áî FINITE s ‚àß (CARD s = n)

   [IS_BIT0A_def]  Definition

      |- (‚àÄx. IS_BIT0A (BIT0A x) ‚áî T) ‚àß ‚àÄx. IS_BIT0A (BIT0B x) ‚áî F

   [IS_BIT0B_def]  Definition

      |- (‚àÄx. IS_BIT0B (BIT0A x) ‚áî F) ‚àß ‚àÄx. IS_BIT0B (BIT0B x) ‚áî T

   [IS_BIT1A_def]  Definition

      |- (‚àÄx. IS_BIT1A (BIT1A x) ‚áî T) ‚àß (‚àÄx. IS_BIT1A (BIT1B x) ‚áî F) ‚àß
         (IS_BIT1A BIT1C ‚áî F)

   [IS_BIT1B_def]  Definition

      |- (‚àÄx. IS_BIT1B (BIT1A x) ‚áî F) ‚àß (‚àÄx. IS_BIT1B (BIT1B x) ‚áî T) ‚àß
         (IS_BIT1B BIT1C ‚áî F)

   [IS_BIT1C_def]  Definition

      |- (‚àÄx. IS_BIT1C (BIT1A x) ‚áî F) ‚àß (‚àÄx. IS_BIT1C (BIT1B x) ‚áî F) ‚àß
         (IS_BIT1C BIT1C ‚áî T)

   [L2V_def]  Definition

      |- ‚àÄL. L2V L = FCP i. EL i L

   [V2L_def]  Definition

      |- ‚àÄv.
           V2L v =
           @L.
             (LENGTH L = dimindex (:Œ≤)) ‚àß
             ‚àÄi. i < dimindex (:Œ≤) ‚áí (EL i L = v ' i)

   [abs_sub1_def]  Definition

      |- ‚àÄr. abs_sub1 r = abs_sub1_CLASS (sub_equiv r)

   [bit0_TY_DEF]  Definition

      |- ‚àÉrep.
           TYPE_DEFINITION
             (Œªa0.
                ‚àÄ'bit0' .
                  (‚àÄa0.
                     (‚àÉa.
                        a0 =
                        (Œªa. ind_type$CONSTR 0 a (Œªn. ind_type$BOTTOM))
                          a) ‚à®
                     (‚àÉa.
                        a0 =
                        (Œªa.
                           ind_type$CONSTR (SUC 0) a (Œªn. ind_type$BOTTOM))
                          a) ‚áí
                     'bit0' a0) ‚áí
                  'bit0' a0) rep

   [bit0_case_def]  Definition

      |- (‚àÄf f1 a. bit0_case f f1 (BIT0A a) = f a) ‚àß
         ‚àÄf f1 a. bit0_case f f1 (BIT0B a) = f1 a

   [bit0_size_def]  Definition

      |- (‚àÄf a. bit0_size f (BIT0A a) = 1 + f a) ‚àß
         ‚àÄf a. bit0_size f (BIT0B a) = 1 + f a

   [bit1_TY_DEF]  Definition

      |- ‚àÉrep.
           TYPE_DEFINITION
             (Œªa0.
                ‚àÄ'bit1' .
                  (‚àÄa0.
                     (‚àÉa.
                        a0 =
                        (Œªa. ind_type$CONSTR 0 a (Œªn. ind_type$BOTTOM))
                          a) ‚à®
                     (‚àÉa.
                        a0 =
                        (Œªa.
                           ind_type$CONSTR (SUC 0) a (Œªn. ind_type$BOTTOM))
                          a) ‚à®
                     (a0 =
                      ind_type$CONSTR (SUC (SUC 0)) ARB
                        (Œªn. ind_type$BOTTOM)) ‚áí
                     'bit1' a0) ‚áí
                  'bit1' a0) rep

   [bit1_case_def]  Definition

      |- (‚àÄf f1 v a. bit1_case f f1 v (BIT1A a) = f a) ‚àß
         (‚àÄf f1 v a. bit1_case f f1 v (BIT1B a) = f1 a) ‚àß
         ‚àÄf f1 v. bit1_case f f1 v BIT1C = v

   [bit1_size_def]  Definition

      |- (‚àÄf a. bit1_size f (BIT1A a) = 1 + f a) ‚àß
         (‚àÄf a. bit1_size f (BIT1B a) = 1 + f a) ‚àß
         ‚àÄf. bit1_size f BIT1C = 0

   [cart_TY_DEF]  Definition

      |- ‚àÉrep. TYPE_DEFINITION (Œªf. T) rep

   [cart_tybij]  Definition

      |- (‚àÄa. mk_cart (dest_cart a) = a) ‚àß
         ‚àÄr. (Œªf. T) r ‚áî (dest_cart (mk_cart r) = r)

   [dimindex_def]  Definition

      |- dimindex (:Œ±) = if FINITE ùïå(:Œ±) then CARD ùïå(:Œ±) else 1

   [fcp_case_def]  Definition

      |- ‚àÄf' h. fcp_case f' (mk_cart h) = f' h

   [fcp_index]  Definition

      |- ‚àÄx i. x ' i = dest_cart x (finite_index i)

   [finite_image_TY_DEF]  Definition

      |- ‚àÉrep. TYPE_DEFINITION (Œªx. (x = ARB) ‚à® FINITE ùïå(:Œ±)) rep

   [finite_image_tybij]  Definition

      |- (‚àÄa. mk_finite_image (dest_finite_image a) = a) ‚àß
         ‚àÄr.
           (Œªx. (x = ARB) ‚à® FINITE ùïå(:Œ±)) r ‚áî
           (dest_finite_image (mk_finite_image r) = r)

   [finite_index_def]  Definition

      |- finite_index = @f. ‚àÄx. ‚àÉ!n. n < dimindex (:Œ±) ‚àß (f n = x)

   [rep_sub1_def]  Definition

      |- ‚àÄa. rep_sub1 a = $@ (rep_sub1_CLASS a)

   [sub1_TY_DEF]  Definition

      |- ‚àÉrep.
           TYPE_DEFINITION (Œªc. ‚àÉr. sub_equiv r r ‚àß (c = sub_equiv r)) rep

   [sub1_bijections]  Definition

      |- (‚àÄa. abs_sub1_CLASS (rep_sub1_CLASS a) = a) ‚àß
         ‚àÄr.
           (Œªc. ‚àÉr. sub_equiv r r ‚àß (c = sub_equiv r)) r ‚áî
           (rep_sub1_CLASS (abs_sub1_CLASS r) = r)

   [sub_equiv_def]  Definition

      |- ‚àÄa b. sub_equiv a b ‚áî a ‚àà EQUAL ‚àß b ‚àà EQUAL ‚à® (a = b)

   [APPLY_FCP_UPDATE_ID]  Theorem

      |- ‚àÄm a. (a :+ m ' a) m = m

   [CART_EQ]  Theorem

      |- ‚àÄx y. (x = y) ‚áî ‚àÄi. i < dimindex (:Œ≤) ‚áí (x ' i = y ' i)

   [DIMINDEX_GE_1]  Theorem

      |- 1 ‚â§ dimindex (:Œ±)

   [EL_V2L]  Theorem

      |- i < dimindex (:Œ≤) ‚áí (EL i (V2L v) = v ' i)

   [FCP_APPLY_UPDATE_THM]  Theorem

      |- ‚àÄm a w b.
           (a :+ w) m ' b =
           if b < dimindex (:Œ≤) then
             if a = b then w else m ' b
           else
             FAIL $' index out of range ((a :+ w) m) b

   [FCP_BETA]  Theorem

      |- ‚àÄi. i < dimindex (:Œ≤) ‚áí ($FCP g ' i = g i)

   [FCP_CONS]  Theorem

      |- FCP_CONS a v = L2V (a::V2L v)

   [FCP_ETA]  Theorem

      |- ‚àÄg. (FCP i. g ' i) = g

   [FCP_EVERY]  Theorem

      |- FCP_EVERY P v ‚áî EVERY P (V2L v)

   [FCP_EXISTS]  Theorem

      |- FCP_EXISTS P v ‚áî EXISTS P (V2L v)

   [FCP_HD]  Theorem

      |- FCP_HD v = HD (V2L v)

   [FCP_MAP]  Theorem

      |- FCP_MAP f v = L2V (MAP f (V2L v))

   [FCP_TL]  Theorem

      |- 1 < dimindex (:Œ≤) ‚áí (FCP_TL v = L2V (TL (V2L v)))

   [FCP_UPDATE_COMMUTES]  Theorem

      |- ‚àÄm a b c d.
           a ‚â† b ‚áí ((a :+ c) ((b :+ d) m) = (b :+ d) ((a :+ c) m))

   [FCP_UPDATE_EQ]  Theorem

      |- ‚àÄm a b c. (a :+ c) ((a :+ b) m) = (a :+ c) m

   [FCP_UPDATE_IMP_ID]  Theorem

      |- ‚àÄm a v. (m ' a = v) ‚áí ((a :+ v) m = m)

   [INDEX_SUB1]  Theorem

      |- dimindex (:Œ± sub1) =
         if 1 < dimindex (:Œ±) then PRE (dimindex (:Œ±)) else 1

   [LENGTH_V2L]  Theorem

      |- LENGTH (V2L v) = dimindex (:Œ≤)

   [NOT_FINITE_IMP_dimindex_1]  Theorem

      |- INFINITE ùïå(:Œ±) ‚áí (dimindex (:Œ±) = 1)

   [NULL_V2L]  Theorem

      |- ¬¨NULL (V2L v)

   [READ_L2V]  Theorem

      |- i < dimindex (:Œ≤) ‚áí (L2V a ' i = EL i a)

   [READ_TL]  Theorem

      |- i < dimindex (:Œ≤) ‚áí (FCP_TL a ' i = a ' (SUC i))

   [V2L_L2V]  Theorem

      |- ‚àÄx. (dimindex (:Œ≤) = LENGTH x) ‚áí (V2L (L2V x) = x)

   [V2L_RECURSIVE]  Theorem

      |- V2L v = FCP_HD v::if dimindex (:Œ≤) = 1 then [] else V2L (FCP_TL v)

   [bit0_11]  Theorem

      |- (‚àÄa a'. (BIT0A a = BIT0A a') ‚áî (a = a')) ‚àß
         ‚àÄa a'. (BIT0B a = BIT0B a') ‚áî (a = a')

   [bit0_Axiom]  Theorem

      |- ‚àÄf0 f1. ‚àÉfn. (‚àÄa. fn (BIT0A a) = f0 a) ‚àß ‚àÄa. fn (BIT0B a) = f1 a

   [bit0_case_cong]  Theorem

      |- ‚àÄM M' f f1.
           (M = M') ‚àß (‚àÄa. (M' = BIT0A a) ‚áí (f a = f' a)) ‚àß
           (‚àÄa. (M' = BIT0B a) ‚áí (f1 a = f1' a)) ‚áí
           (bit0_case f f1 M = bit0_case f' f1' M')

   [bit0_distinct]  Theorem

      |- ‚àÄa' a. BIT0A a ‚â† BIT0B a'

   [bit0_induction]  Theorem

      |- ‚àÄP. (‚àÄa. P (BIT0A a)) ‚àß (‚àÄa. P (BIT0B a)) ‚áí ‚àÄb. P b

   [bit0_nchotomy]  Theorem

      |- ‚àÄbb. (‚àÉa. bb = BIT0A a) ‚à® ‚àÉa. bb = BIT0B a

   [bit1_11]  Theorem

      |- (‚àÄa a'. (BIT1A a = BIT1A a') ‚áî (a = a')) ‚àß
         ‚àÄa a'. (BIT1B a = BIT1B a') ‚áî (a = a')

   [bit1_Axiom]  Theorem

      |- ‚àÄf0 f1 f2.
           ‚àÉfn.
             (‚àÄa. fn (BIT1A a) = f0 a) ‚àß (‚àÄa. fn (BIT1B a) = f1 a) ‚àß
             (fn BIT1C = f2)

   [bit1_case_cong]  Theorem

      |- ‚àÄM M' f f1 v.
           (M = M') ‚àß (‚àÄa. (M' = BIT1A a) ‚áí (f a = f' a)) ‚àß
           (‚àÄa. (M' = BIT1B a) ‚áí (f1 a = f1' a)) ‚àß
           ((M' = BIT1C) ‚áí (v = v')) ‚áí
           (bit1_case f f1 v M = bit1_case f' f1' v' M')

   [bit1_distinct]  Theorem

      |- (‚àÄa' a. BIT1A a ‚â† BIT1B a') ‚àß (‚àÄa. BIT1A a ‚â† BIT1C) ‚àß
         ‚àÄa. BIT1B a ‚â† BIT1C

   [bit1_induction]  Theorem

      |- ‚àÄP. (‚àÄa. P (BIT1A a)) ‚àß (‚àÄa. P (BIT1B a)) ‚àß P BIT1C ‚áí ‚àÄb. P b

   [bit1_nchotomy]  Theorem

      |- ‚àÄbb. (‚àÉa. bb = BIT1A a) ‚à® (‚àÉa. bb = BIT1B a) ‚à® (bb = BIT1C)

   [card_dimindex]  Theorem

      |- FINITE ùïå(:Œ±) ‚áí (CARD ùïå(:Œ±) = dimindex (:Œ±))

   [datatype_bit0]  Theorem

      |- DATATYPE (bit0 BIT0A BIT0B)

   [datatype_bit1]  Theorem

      |- DATATYPE (bit1 BIT1A BIT1B BIT1C)

   [dimindex]  Theorem

      |- dimindex (:Œ±) = if FINITE ùïå(:Œ±) then CARD ùïå(:Œ±) else 1

   [exists_v2l_thm]  Theorem

      |- ‚àÉx.
           (LENGTH x = dimindex (:Œ≤)) ‚àß
           ‚àÄi. i < dimindex (:Œ≤) ‚áí (EL i x = v ' i)

   [fcp_Axiom]  Theorem

      |- ‚àÄf. ‚àÉg. ‚àÄh. g (mk_cart h) = f h

   [fcp_ind]  Theorem

      |- ‚àÄP. (‚àÄf. P (mk_cart f)) ‚áí ‚àÄa. P a

   [fcp_subst_comp]  Theorem

      |- ‚àÄa b f. (x :+ y) ($FCP f) = FCP c. if x = c then y else f c

   [finite_bit0]  Theorem

      |- FINITE ùïå(:Œ± bit0) ‚áî FINITE ùïå(:Œ±)

   [finite_bit1]  Theorem

      |- FINITE ùïå(:Œ± bit1) ‚áî FINITE ùïå(:Œ±)

   [finite_one]  Theorem

      |- FINITE ùïå(:unit)

   [finite_sub1]  Theorem

      |- FINITE ùïå(:Œ± sub1) ‚áî FINITE ùïå(:Œ±)

   [finite_sum]  Theorem

      |- FINITE ùïå(:Œ± + Œ≤) ‚áî FINITE ùïå(:Œ±) ‚àß FINITE ùïå(:Œ≤)

   [index_bit0]  Theorem

      |- dimindex (:Œ± bit0) = if FINITE ùïå(:Œ±) then 2 * dimindex (:Œ±) else 1

   [index_bit1]  Theorem

      |- dimindex (:Œ± bit1) =
         if FINITE ùïå(:Œ±) then 2 * dimindex (:Œ±) + 1 else 1

   [index_comp]  Theorem

      |- ‚àÄf n.
           $FCP f ' n =
           if n < dimindex (:Œ≤) then
             f n
           else
             FAIL $' FCP out of bounds ($FCP f) n

   [index_one]  Theorem

      |- dimindex (:unit) = 1

   [index_sum]  Theorem

      |- dimindex (:Œ± + Œ≤) =
         if FINITE ùïå(:Œ±) ‚àß FINITE ùïå(:Œ≤) then
           dimindex (:Œ±) + dimindex (:Œ≤)
         else
           1

   [sub1_ABS_REP_CLASS]  Theorem

      |- (‚àÄa. abs_sub1_CLASS (rep_sub1_CLASS a) = a) ‚àß
         ‚àÄc.
           (‚àÉr. sub_equiv r r ‚àß (c = sub_equiv r)) ‚áî
           (rep_sub1_CLASS (abs_sub1_CLASS c) = c)

   [sub1_QUOTIENT]  Theorem

      |- QUOTIENT sub_equiv abs_sub1 rep_sub1


*)
end
